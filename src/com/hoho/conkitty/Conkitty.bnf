{
  parserClass="com.hoho.conkitty.parser.ConkittyParser"
  stubParserClass="com.hoho.conkitty.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Conkitty"
  psiImplClassSuffix="Impl"
  psiPackage="com.hoho.conkitty.psi"
  psiImplPackage="com.hoho.conkitty.psi.impl"

  elementTypeHolderClass="com.hoho.conkitty.psi.ConkittyTypes"
  elementTypeClass="com.hoho.conkitty.psi.ConkittyElementType"
  tokenTypeClass="com.hoho.conkitty.psi.ConkittyTokenType"
}

root ::= conkitty_template *

private conkitty_template ::= template_name variable* suite

private suite ::= INDENT statement+ DEDENT CRLF

private statement ::= (css | string | js | cmd | comment) CRLF

private expression ::= string | js | payload_name

private js ::= javascript_begin javascript javascript_end

javascript_begin ::= "("
javascript_end ::= ")"

private attr_cmd_name ::= "ATTR"
private call_cmd_name ::= "CALL"
private choose_cmd_name ::= "CHOOSE"
private each_cmd_name ::= "EACH"
private insert_cmd_name ::= "INSERT"
private set_cmd_name ::= "SET"
private test_cmd_name ::= "TEST"
private with_cmd_name ::= "WITH"

private choose_when_name ::= "WHEN"
private choose_otherwise_name ::= "OTHERWISE"
private with_else_name ::= "ELSE"

private payload_name ::= "PAYLOAD"

keyword ::= attr_cmd_name | call_cmd_name | choose_cmd_name | each_cmd_name |
            insert_cmd_name | set_cmd_name | test_cmd_name | with_cmd_name |
            choose_when_name | choose_otherwise_name | with_else_name | payload_name

private cmd ::= attr_cmd | call_cmd | choose_cmd | each_cmd |
                insert_cmd | set_cmd | test_cmd | with_cmd

private attr_cmd ::= attr_cmd_name expression expression CRLF
private call_cmd ::= call_cmd_name template_name expression* (suite | CRLF)
private choose_cmd ::= choose_cmd_name CRLF (choose_when_name expression CRLF suite)+ (choose_otherwise_name CRLF suite)?
private each_cmd ::= each_cmd_name variable? variable? expression CRLF
private insert_cmd ::= insert_cmd_name expression CRLF
private set_cmd ::= set_cmd_name variable (expression | (CRLF suite))
private test_cmd ::= test_cmd_name expression CRLF suite
private with_cmd ::= with_cmd_name variable expression CRLF suite (with_else_name CRLF suite)?
