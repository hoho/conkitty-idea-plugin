/* The following code was generated by JFlex 1.4.3 on 10/22/13 3:57 PM */

package com.hoho.conkitty;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.conkitty.psi.ConkittyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/22/13 3:57 PM from the specification file
 * <tt>/Users/hoho/Work/conkittyPlugin/src/com/hoho/conkitty/Conkitty.flex</tt>
 */
abstract class _ConkittyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_TEMPLATE = 6;
  public static final int YYINITIAL = 0;
  public static final int IN_JAVASCRIPT2 = 12;
  public static final int IN_CALL = 14;
  public static final int IN_VAR_DECL = 8;
  public static final int IN_JAVASCRIPT = 10;
  public static final int IN_COMMENT = 2;
  public static final int IN_LONG_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\10"+
    "\1\34\1\0\1\40\1\0\1\6\1\41\1\42\1\31\2\0\1\32"+
    "\1\34\1\30\12\5\3\0\1\36\2\0\1\46\1\11\1\33\1\14"+
    "\1\27\1\21\2\33\1\16\1\22\2\33\1\15\1\33\1\23\1\17"+
    "\1\25\1\33\1\13\1\20\1\12\2\33\1\24\1\33\1\26\1\33"+
    "\1\35\1\7\1\37\1\0\1\4\1\0\32\45\1\43\1\0\1\44"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\11\1\1\2\1\1\1\7\1\10\20\11\20\12\2\13"+
    "\2\0\1\14\3\0\1\15\16\0\1\16\22\0\1\11"+
    "\22\0\1\12\1\0\1\13\7\0\1\17\5\0\1\16"+
    "\1\20\26\0\1\13\1\0\1\15\1\21\1\22\21\0"+
    "\1\11\4\0\1\12\1\22\2\0\1\16\1\0\1\16"+
    "\2\0\1\20\1\0\1\20\12\0\1\16\5\0\1\20"+
    "\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0111\0\u0111"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u0111\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0111\0\u0666\0\u068d"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5"+
    "\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u01fb"+
    "\0\u01ad\0\u0111\0\u08fd\0\u01d4\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u03a8\0\u0b94\0\u0618\0\u046b"+
    "\0\u0bbb\0\u0492\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd"+
    "\0\u0e04\0\u0861\0\u06b4\0\u0e2b\0\u06db\0\u0e52\0\u0e79\0\u0ea0"+
    "\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8"+
    "\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110"+
    "\0\u1137\0\u115e\0\u1185\0\u11ac\0\u0111\0\u11d3\0\u11fa\0\u1221"+
    "\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359"+
    "\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491"+
    "\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u0111\0\u0111\0\u16b3"+
    "\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb"+
    "\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923"+
    "\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u08af\0\u1a34"+
    "\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c"+
    "\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4"+
    "\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc"+
    "\0\u1e03\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14"+
    "\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c"+
    "\0\u2073\0\u209a\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184"+
    "\0\u21ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\10\1\14\1\10\1\15"+
    "\17\13\1\16\2\10\1\13\5\10\1\17\1\20\2\10"+
    "\1\13\2\10\2\11\1\12\2\10\1\14\1\10\1\15"+
    "\1\21\1\22\1\10\1\23\2\10\1\24\1\25\1\26"+
    "\1\27\1\10\1\30\1\31\2\10\1\16\10\10\1\17"+
    "\1\20\5\10\2\32\1\12\2\10\1\14\1\10\1\15"+
    "\1\21\1\22\1\10\1\23\2\10\1\24\1\25\1\26"+
    "\1\27\1\10\1\30\1\31\2\10\1\16\10\10\1\17"+
    "\1\20\3\10\1\33\1\10\2\34\1\12\1\35\1\10"+
    "\1\14\1\10\1\15\17\35\1\16\2\10\1\35\5\10"+
    "\1\17\1\20\2\10\1\35\1\10\1\36\2\37\1\40"+
    "\2\36\1\41\1\36\1\42\1\43\1\44\1\36\1\45"+
    "\2\36\1\46\1\47\1\50\1\51\1\36\1\52\1\53"+
    "\2\36\1\54\15\36\1\55\1\56\2\57\1\60\2\56"+
    "\1\61\1\56\1\62\1\63\1\64\1\56\1\65\2\56"+
    "\1\66\1\67\1\70\1\71\1\56\1\72\1\73\2\56"+
    "\1\74\15\56\1\75\1\10\2\11\1\12\1\76\1\10"+
    "\1\14\1\10\1\15\3\76\1\77\13\76\1\16\2\10"+
    "\1\76\5\10\1\17\1\20\2\10\1\76\1\10\50\0"+
    "\2\11\47\0\1\12\24\0\1\100\22\0\2\13\3\0"+
    "\17\13\3\0\1\13\11\0\1\13\1\0\6\101\1\102"+
    "\1\103\37\101\7\104\1\105\1\102\36\104\30\0\1\106"+
    "\1\107\27\0\1\110\55\0\1\111\36\0\1\112\4\0"+
    "\1\113\42\0\1\114\55\0\1\115\36\0\1\116\3\0"+
    "\1\117\54\0\1\120\41\0\1\121\3\0\1\122\35\0"+
    "\1\123\36\0\2\32\1\124\1\13\4\0\17\13\3\0"+
    "\1\13\11\0\1\13\5\0\1\125\4\0\17\125\2\0"+
    "\2\125\11\0\1\125\2\0\2\34\1\126\47\0\2\35"+
    "\3\0\17\35\3\0\1\35\11\0\1\35\2\0\2\37"+
    "\47\0\1\40\24\0\1\127\16\0\6\130\1\36\1\131"+
    "\37\130\7\132\1\133\1\36\36\132\12\0\1\134\55\0"+
    "\1\135\36\0\1\136\4\0\1\137\42\0\1\140\55\0"+
    "\1\141\36\0\1\142\3\0\1\143\54\0\1\144\41\0"+
    "\1\145\3\0\1\146\35\0\1\147\65\0\1\150\1\151"+
    "\21\0\1\55\4\0\17\55\2\0\2\55\11\0\1\55"+
    "\2\0\2\57\47\0\1\60\24\0\1\152\16\0\6\153"+
    "\1\56\1\154\37\153\7\155\1\156\1\56\36\155\12\0"+
    "\1\157\55\0\1\160\36\0\1\161\4\0\1\162\42\0"+
    "\1\163\55\0\1\164\36\0\1\165\3\0\1\166\54\0"+
    "\1\167\41\0\1\170\3\0\1\171\35\0\1\172\65\0"+
    "\1\173\1\174\21\0\1\75\4\0\17\75\2\0\2\75"+
    "\11\0\1\75\5\0\2\76\3\0\17\76\3\0\1\76"+
    "\11\0\1\76\5\0\2\76\3\0\1\175\16\76\3\0"+
    "\1\76\11\0\1\76\1\0\2\101\1\0\44\101\2\104"+
    "\1\0\44\104\1\106\2\0\44\106\31\176\1\177\15\176"+
    "\12\0\1\200\54\0\1\201\43\0\1\202\50\0\1\203"+
    "\45\0\1\204\42\0\1\205\50\0\1\206\52\0\1\207"+
    "\46\0\1\210\47\0\1\211\37\0\1\206\62\0\1\212"+
    "\23\0\1\124\41\0\1\213\4\0\1\126\41\0\1\214"+
    "\1\0\2\130\1\0\44\130\2\132\1\0\44\132\12\0"+
    "\1\215\54\0\1\141\43\0\1\216\50\0\1\217\45\0"+
    "\1\220\42\0\1\36\50\0\1\221\52\0\1\222\46\0"+
    "\1\223\47\0\1\224\37\0\1\221\62\0\1\225\20\0"+
    "\1\150\2\0\44\150\31\226\1\227\15\226\2\153\1\0"+
    "\44\153\2\155\1\0\44\155\12\0\1\230\54\0\1\164"+
    "\43\0\1\231\50\0\1\232\45\0\1\233\42\0\1\56"+
    "\50\0\1\234\52\0\1\235\46\0\1\236\47\0\1\237"+
    "\37\0\1\234\62\0\1\240\20\0\1\173\2\0\44\173"+
    "\31\241\1\242\15\241\4\0\2\76\3\0\4\76\1\243"+
    "\12\76\3\0\1\76\11\0\1\76\1\0\31\176\1\244"+
    "\15\176\30\0\1\245\1\177\30\0\1\246\45\0\1\246"+
    "\51\0\1\247\50\0\1\117\50\0\1\250\43\0\1\205"+
    "\51\0\1\246\46\0\1\251\50\0\1\246\40\0\1\252"+
    "\35\0\2\213\24\0\1\213\1\0\1\253\1\254\2\0"+
    "\1\255\1\256\1\0\1\257\1\0\1\213\5\0\2\214"+
    "\24\0\1\214\1\0\1\260\1\261\2\0\1\262\1\263"+
    "\1\0\1\264\1\0\1\214\14\0\1\36\50\0\1\36"+
    "\50\0\1\143\50\0\1\265\43\0\1\36\51\0\1\36"+
    "\46\0\1\266\50\0\1\36\40\0\1\267\31\0\31\226"+
    "\1\270\15\226\30\0\1\271\1\227\30\0\1\56\50\0"+
    "\1\56\50\0\1\166\50\0\1\272\43\0\1\56\51\0"+
    "\1\56\46\0\1\273\50\0\1\56\40\0\1\274\31\0"+
    "\31\241\1\275\15\241\30\0\1\276\1\242\21\0\2\76"+
    "\3\0\4\76\1\277\12\76\3\0\1\76\11\0\1\76"+
    "\1\0\30\176\1\245\1\244\15\176\3\0\1\245\56\0"+
    "\1\300\46\0\1\201\52\0\1\301\33\0\2\302\3\0"+
    "\17\302\2\0\2\302\11\0\1\302\4\0\1\254\2\303"+
    "\3\0\17\303\2\0\2\303\11\0\1\303\6\0\1\304"+
    "\3\0\17\304\2\0\2\304\11\0\1\304\4\0\1\256"+
    "\1\0\1\305\3\0\17\305\2\0\2\305\11\0\1\305"+
    "\4\0\1\257\1\0\1\306\3\0\17\306\2\0\2\306"+
    "\11\0\1\306\5\0\2\307\3\0\17\307\2\0\2\307"+
    "\11\0\1\307\4\0\1\261\2\310\3\0\17\310\2\0"+
    "\2\310\11\0\1\310\6\0\1\311\3\0\17\311\2\0"+
    "\2\311\11\0\1\311\4\0\1\263\1\0\1\312\3\0"+
    "\17\312\2\0\2\312\11\0\1\312\4\0\1\264\1\0"+
    "\1\313\3\0\17\313\2\0\2\313\11\0\1\313\14\0"+
    "\1\314\46\0\1\141\52\0\1\315\27\0\30\226\1\271"+
    "\1\270\15\226\3\0\1\271\56\0\1\316\46\0\1\164"+
    "\52\0\1\317\27\0\30\241\1\276\1\275\15\241\3\0"+
    "\1\276\67\0\1\320\33\0\1\321\41\0\2\302\3\0"+
    "\17\302\2\0\2\302\1\253\1\254\2\0\1\255\1\256"+
    "\1\0\1\257\1\0\1\302\4\0\1\322\2\303\3\0"+
    "\17\303\2\0\2\303\2\0\1\323\1\324\5\0\1\303"+
    "\6\0\1\304\3\0\17\304\2\0\2\304\1\253\1\254"+
    "\2\0\1\255\1\256\1\0\1\257\1\0\1\304\4\0"+
    "\1\325\1\0\1\305\3\0\17\305\2\0\2\305\6\0"+
    "\1\324\2\0\1\305\4\0\1\326\1\0\1\306\3\0"+
    "\17\306\2\0\2\306\2\0\1\327\5\0\1\324\1\306"+
    "\5\0\2\307\3\0\17\307\2\0\2\307\1\260\1\261"+
    "\2\0\1\262\1\263\1\0\1\264\1\0\1\307\4\0"+
    "\1\330\2\310\3\0\17\310\2\0\2\310\2\0\1\331"+
    "\1\332\5\0\1\310\6\0\1\311\3\0\17\311\2\0"+
    "\2\311\1\260\1\261\2\0\1\262\1\263\1\0\1\264"+
    "\1\0\1\311\4\0\1\333\1\0\1\312\3\0\17\312"+
    "\2\0\2\312\6\0\1\332\2\0\1\312\4\0\1\334"+
    "\1\0\1\313\3\0\17\313\2\0\2\313\2\0\1\335"+
    "\5\0\1\332\1\313\25\0\1\336\33\0\1\337\61\0"+
    "\1\340\33\0\1\341\57\0\1\117\53\0\1\246\22\0"+
    "\1\322\32\0\1\323\1\324\12\0\1\323\2\342\1\343"+
    "\1\0\1\344\17\342\2\0\2\342\11\0\1\342\35\0"+
    "\1\253\1\254\2\0\1\255\1\256\1\0\1\257\6\0"+
    "\1\325\36\0\1\324\7\0\1\326\32\0\1\327\5\0"+
    "\1\324\5\0\1\327\1\0\1\345\3\0\17\345\2\0"+
    "\2\345\11\0\1\345\4\0\1\330\32\0\1\331\1\332"+
    "\12\0\1\331\2\346\1\347\1\0\1\350\17\346\2\0"+
    "\2\346\11\0\1\346\35\0\1\260\1\261\2\0\1\262"+
    "\1\263\1\0\1\264\6\0\1\333\36\0\1\332\7\0"+
    "\1\334\32\0\1\335\5\0\1\332\5\0\1\335\1\0"+
    "\1\351\3\0\17\351\2\0\2\351\11\0\1\351\23\0"+
    "\1\143\53\0\1\36\41\0\1\166\53\0\1\56\22\0"+
    "\1\352\2\342\3\0\17\342\2\0\2\342\3\0\1\324"+
    "\5\0\1\342\1\0\6\343\1\352\1\353\37\343\7\344"+
    "\1\354\1\352\36\344\3\0\1\355\1\0\1\345\3\0"+
    "\17\345\2\0\2\345\10\0\1\324\1\345\4\0\1\356"+
    "\2\346\3\0\17\346\2\0\2\346\3\0\1\332\5\0"+
    "\1\346\1\0\6\347\1\356\1\357\37\347\7\350\1\360"+
    "\1\356\36\350\3\0\1\361\1\0\1\351\3\0\17\351"+
    "\2\0\2\351\10\0\1\332\1\351\4\0\1\352\33\0"+
    "\1\324\7\0\2\343\1\0\44\343\2\344\1\0\44\344"+
    "\3\0\1\355\40\0\1\324\5\0\1\356\33\0\1\332"+
    "\7\0\2\347\1\0\44\347\2\350\1\0\44\350\3\0"+
    "\1\361\40\0\1\332\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8658];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\6\1\2\11\15\1\1\11\17\1\1\11"+
    "\21\1\2\0\1\11\3\0\1\1\16\0\1\1\22\0"+
    "\1\1\22\0\1\1\1\0\1\1\7\0\1\11\5\0"+
    "\2\1\26\0\1\1\1\0\1\1\2\11\21\0\1\1"+
    "\4\0\2\1\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\12\0\1\1\5\0\1\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _ConkittyLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  private int afterJavaScript = YYINITIAL;

  protected abstract void readJavaScript(int state) throws java.io.IOException;


  _ConkittyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _ConkittyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return VARIABLE;
          }
        case 19: break;
        case 13: 
          { return COMMENT;
          }
        case 20: break;
        case 4: 
          { yybegin(IN_VAR_DECL); return TEMPLATE_NAME;
          }
        case 21: break;
        case 15: 
          { yybegin(IN_VAR_DECL); return KEYWORD;
          }
        case 22: break;
        case 9: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(afterJavaScript); return JAVASCRIPT;
          }
        case 23: break;
        case 16: 
          { yybegin(IN_TEMPLATE); return CSS;
          }
        case 24: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 25: break;
        case 10: 
          { return JAVASCRIPT;
          }
        case 26: break;
        case 7: 
          { yybegin(IN_TEMPLATE); return CRLF;
          }
        case 27: break;
        case 11: 
          { yybegin(IN_TEMPLATE); return TEMPLATE_NAME;
          }
        case 28: break;
        case 5: 
          { afterJavaScript = yystate(); yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 29: break;
        case 3: 
          { return WHITE_SPACE;
          }
        case 30: break;
        case 14: 
          { return CSS;
          }
        case 31: break;
        case 17: 
          { return KEYWORD;
          }
        case 32: break;
        case 18: 
          { yybegin(IN_CALL); return KEYWORD;
          }
        case 33: break;
        case 12: 
          { return STRING;
          }
        case 34: break;
        case 2: 
          { return CRLF;
          }
        case 35: break;
        case 6: 
          { return JAVASCRIPT_END;
          }
        case 36: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
