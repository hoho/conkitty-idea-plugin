/* The following code was generated by JFlex 1.4.3 on 10/21/13 3:15 AM */

package com.hoho.conkitty;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.conkitty.psi.ConkittyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/21/13 3:15 AM from the specification file
 * <tt>/Users/hoho/Work/conkittyPlugin/src/com/hoho/conkitty/Conkitty.flex</tt>
 */
abstract class _ConkittyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_TEMPLATE = 6;
  public static final int YYINITIAL = 0;
  public static final int IN_JAVASCRIPT2 = 12;
  public static final int IN_CALL = 14;
  public static final int IN_VAR_DECL = 8;
  public static final int IN_JAVASCRIPT = 10;
  public static final int IN_COMMENT = 2;
  public static final int IN_LONG_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\10"+
    "\4\0\1\6\1\34\1\35\1\31\2\0\1\33\1\0\1\30\12\5"+
    "\6\0\1\32\1\11\1\4\1\14\1\27\1\21\2\4\1\16\1\22"+
    "\2\4\1\15\1\4\1\23\1\17\1\25\1\4\1\13\1\20\1\12"+
    "\2\4\1\24\1\4\1\26\1\4\1\0\1\7\2\0\1\4\1\0"+
    "\32\4\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\3\2\1\3\3\1\1\4\1\5\11\1"+
    "\12\6\1\1\2\7\1\10\17\11\17\12\2\13\1\0"+
    "\1\14\21\0\15\6\14\0\1\13\2\15\7\0\1\16"+
    "\5\0\5\6\1\16\5\6\4\0\1\13\1\0\1\17"+
    "\1\20\3\0\1\17\1\20\3\6\2\0\1\20\2\0"+
    "\2\6\2\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\322\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\322"+
    "\0\322\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258"+
    "\0\u0276\0\u0294\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348"+
    "\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\322\0\u041a"+
    "\0\322\0\u0438\0\u0456\0\u0474\0\u0492\0\u01a4\0\u01c2\0\u01e0"+
    "\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\u04b0\0\322"+
    "\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u01a4\0\u01c2\0\u01e0\0\u01fe"+
    "\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\u0546\0\u0564\0\u0582"+
    "\0\u014a\0\322\0\u05a0\0\u0168\0\u05be\0\u05dc\0\u05fa\0\u0618"+
    "\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708"+
    "\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8"+
    "\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u03de"+
    "\0\u0474\0\u08e8\0\u0492\0\u0906\0\u0924\0\u0942\0\u050a\0\u0960"+
    "\0\u0528\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\322\0\u0a14"+
    "\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\322\0\u0ae6"+
    "\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6"+
    "\0\u0bf4\0\u02b2\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8"+
    "\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\322\0\322\0\u0d5c"+
    "\0\u0d7a\0\u0d98\0\u02b2\0\u02b2\0\u0db6\0\u0dd4\0\u0df2\0\u0e10"+
    "\0\u0e2e\0\u0564\0\u0e4c\0\u0e6a\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2"+
    "\0\u0f00\0\u0f1e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\10"+
    "\1\16\17\14\1\17\3\10\1\20\1\21\1\10\1\11"+
    "\1\12\1\13\2\10\1\15\1\10\1\16\1\22\1\23"+
    "\1\10\1\24\2\10\1\25\1\26\1\27\1\30\1\10"+
    "\1\31\1\32\2\10\1\17\3\10\1\20\1\21\1\10"+
    "\1\11\1\12\1\13\1\33\1\10\1\15\1\10\1\16"+
    "\1\34\1\35\1\33\1\36\2\33\1\37\1\40\1\41"+
    "\1\42\1\33\1\43\1\44\2\33\1\17\1\10\1\45"+
    "\1\10\1\20\1\21\1\10\1\46\1\47\1\13\1\50"+
    "\1\10\1\15\1\10\1\16\17\50\1\17\3\10\1\20"+
    "\1\21\1\51\1\52\1\51\1\53\2\51\1\54\1\51"+
    "\1\55\1\56\1\57\1\51\1\60\2\51\1\61\1\62"+
    "\1\63\1\64\1\51\1\65\1\66\2\51\1\67\5\51"+
    "\1\70\1\71\1\70\1\72\2\70\1\73\1\70\1\74"+
    "\1\75\1\76\1\70\1\77\2\70\1\100\1\101\1\102"+
    "\1\103\1\70\1\104\1\105\2\70\1\106\5\70\1\10"+
    "\1\11\1\12\1\13\1\107\1\10\1\15\1\10\1\16"+
    "\3\107\1\110\13\107\1\17\3\10\1\20\1\21\40\0"+
    "\1\12\36\0\1\13\36\0\2\14\3\0\17\14\6\0"+
    "\6\111\1\112\1\113\26\111\7\114\1\115\1\112\25\114"+
    "\30\0\1\116\1\117\16\0\1\120\44\0\1\121\25\0"+
    "\1\122\4\0\1\123\31\0\1\124\44\0\1\125\25\0"+
    "\1\126\3\0\1\127\43\0\1\130\30\0\1\131\3\0"+
    "\1\132\24\0\1\133\30\0\2\33\3\0\17\33\12\0"+
    "\2\33\3\0\1\33\1\134\15\33\12\0\2\33\3\0"+
    "\10\33\1\135\6\33\12\0\2\33\3\0\1\136\4\33"+
    "\1\137\11\33\12\0\2\33\3\0\1\33\1\140\15\33"+
    "\12\0\2\33\3\0\10\33\1\141\6\33\12\0\2\33"+
    "\3\0\1\142\3\33\1\143\12\33\12\0\2\33\3\0"+
    "\12\33\1\144\4\33\12\0\2\33\3\0\5\33\1\145"+
    "\3\33\1\146\5\33\12\0\2\33\3\0\1\147\16\33"+
    "\12\0\1\150\4\0\17\150\3\0\1\150\4\0\1\47"+
    "\37\0\2\50\3\0\17\50\10\0\1\51\36\0\1\53"+
    "\32\0\6\151\1\51\1\152\26\151\7\153\1\154\1\51"+
    "\25\153\30\0\1\155\1\156\6\0\1\70\36\0\1\72"+
    "\32\0\6\157\1\70\1\160\26\157\7\161\1\162\1\70"+
    "\25\161\30\0\1\163\1\164\10\0\2\107\3\0\17\107"+
    "\12\0\2\107\3\0\1\165\16\107\6\0\2\111\1\0"+
    "\33\111\2\114\1\0\33\114\1\116\1\166\1\167\33\116"+
    "\31\170\1\171\4\170\12\0\1\172\43\0\1\173\32\0"+
    "\1\174\37\0\1\175\34\0\1\176\31\0\1\177\37\0"+
    "\1\200\41\0\1\201\35\0\1\202\36\0\1\203\26\0"+
    "\1\200\51\0\1\204\13\0\2\33\3\0\1\33\1\205"+
    "\15\33\12\0\2\33\3\0\7\33\1\206\7\33\12\0"+
    "\2\33\3\0\4\33\1\207\12\33\12\0\2\33\3\0"+
    "\6\33\1\210\10\33\12\0\2\33\3\0\5\33\1\211"+
    "\11\33\12\0\2\33\3\0\1\33\1\212\15\33\12\0"+
    "\2\33\3\0\3\33\1\213\13\33\12\0\2\33\3\0"+
    "\7\33\1\214\7\33\12\0\2\33\3\0\7\33\1\215"+
    "\7\33\12\0\2\33\3\0\10\33\1\216\6\33\12\0"+
    "\2\33\3\0\1\33\1\213\15\33\12\0\2\33\3\0"+
    "\15\33\1\217\1\33\6\0\2\151\1\0\33\151\2\153"+
    "\1\0\33\153\1\155\1\52\1\51\33\155\31\220\1\221"+
    "\4\220\2\157\1\0\33\157\2\161\1\0\33\161\1\163"+
    "\1\71\1\70\33\163\31\222\1\223\4\222\4\0\2\107"+
    "\3\0\4\107\1\224\12\107\10\0\1\167\33\0\31\170"+
    "\1\225\4\170\30\0\1\167\1\171\17\0\1\226\34\0"+
    "\1\226\40\0\1\227\37\0\1\127\37\0\1\230\32\0"+
    "\1\177\40\0\1\226\35\0\1\231\37\0\1\226\27\0"+
    "\1\232\24\0\2\33\3\0\2\33\1\233\14\33\12\0"+
    "\2\33\3\0\1\33\1\233\15\33\12\0\2\33\3\0"+
    "\4\33\1\234\12\33\12\0\2\33\3\0\6\33\1\143"+
    "\10\33\12\0\2\33\3\0\10\33\1\235\6\33\12\0"+
    "\2\33\3\0\5\33\1\212\11\33\12\0\2\33\3\0"+
    "\10\33\1\233\6\33\12\0\2\33\3\0\10\33\1\236"+
    "\6\33\12\0\2\33\3\0\12\33\1\233\4\33\12\0"+
    "\2\33\3\0\4\33\1\237\12\33\6\0\31\220\1\240"+
    "\4\220\30\0\1\51\1\221\4\0\31\222\1\241\4\222"+
    "\30\0\1\70\1\223\10\0\2\107\3\0\4\107\1\242"+
    "\12\107\6\0\30\170\1\167\1\225\4\170\13\0\1\243"+
    "\35\0\1\173\41\0\1\244\22\0\2\33\3\0\2\33"+
    "\1\245\14\33\12\0\2\33\3\0\2\33\1\206\14\33"+
    "\12\0\2\33\3\0\6\33\1\246\10\33\6\0\30\220"+
    "\1\51\1\240\4\220\30\222\1\70\1\241\4\222\24\0"+
    "\1\247\22\0\1\250\30\0\2\33\3\0\13\33\1\251"+
    "\3\33\12\0\2\33\3\0\1\252\16\33\30\0\1\127"+
    "\42\0\1\226\12\0\2\33\3\0\11\33\1\143\5\33"+
    "\12\0\2\33\3\0\16\33\1\233\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\5\1\2\11\25\1\1\11"+
    "\1\1\1\11\16\1\1\11\20\1\1\0\1\11\21\0"+
    "\15\1\14\0\2\1\1\11\7\0\1\11\5\0\13\1"+
    "\4\0\1\1\1\0\2\11\3\0\5\1\2\0\1\1"+
    "\2\0\2\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _ConkittyLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  private int afterJavaScript = YYINITIAL;

  protected abstract void readJavaScript(int state) throws java.io.IOException;


  _ConkittyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _ConkittyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 104) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { yybegin(IN_CALL); return KEYWORD;
          }
        case 17: break;
        case 7: 
          { yybegin(IN_TEMPLATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 18: break;
        case 4: 
          { afterJavaScript = yystate(); yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 19: break;
        case 11: 
          { yybegin(IN_TEMPLATE); return TEMPLATE_NAME;
          }
        case 20: break;
        case 15: 
          { return KEYWORD;
          }
        case 21: break;
        case 10: 
          { return JAVASCRIPT;
          }
        case 22: break;
        case 14: 
          { yybegin(IN_VAR_DECL); return KEYWORD;
          }
        case 23: break;
        case 3: 
          { yybegin(IN_VAR_DECL); return TEMPLATE_NAME;
          }
        case 24: break;
        case 13: 
          { return COMMENT;
          }
        case 25: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 26: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 27: break;
        case 9: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(afterJavaScript); return JAVASCRIPT;
          }
        case 28: break;
        case 6: 
          { return CSS;
          }
        case 29: break;
        case 12: 
          { return STRING;
          }
        case 30: break;
        case 5: 
          { return JAVASCRIPT_END;
          }
        case 31: break;
        case 8: 
          { return VARIABLE;
          }
        case 32: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
