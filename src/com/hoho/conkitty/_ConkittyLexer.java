/* The following code was generated by JFlex 1.4.3 on 5/7/14 9:24 PM */

package com.hoho.conkitty;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.conkitty.psi.ConkittyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/7/14 9:24 PM from the specification file
 * <tt>/Users/hoho/Work/conkittyPlugin/src/com/hoho/conkitty/Conkitty.flex</tt>
 */
abstract class _ConkittyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_TEMPLATE = 2;
  public static final int NO_JS = 10;
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_JS = 12;
  public static final int IN_CALL = 6;
  public static final int AFTER_CALL = 4;
  public static final int IN_JS = 14;
  public static final int IN_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1,  1,  4,  4,  5,  5,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\6"+
    "\1\43\1\37\1\45\1\50\1\10\1\44\1\46\1\5\1\57\1\61"+
    "\1\11\1\42\1\4\12\14\1\12\2\0\1\56\2\0\1\47\1\15"+
    "\1\40\1\21\1\34\1\24\1\40\1\35\1\22\1\32\1\51\1\40"+
    "\1\25\1\30\1\36\1\23\1\27\1\40\1\20\1\16\1\17\2\40"+
    "\1\31\1\26\1\33\1\40\1\52\1\7\1\53\1\60\1\13\1\0"+
    "\32\41\1\54\1\0\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\3\1\1\4\4\1\1\5"+
    "\1\1\1\6\2\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\14\13\1\1\20\2\21"+
    "\13\22\1\23\1\24\2\0\2\25\1\0\1\26\3\0"+
    "\1\26\3\0\1\22\1\14\1\27\1\14\1\30\5\0"+
    "\1\31\17\0\1\21\1\31\16\22\1\0\1\32\1\25"+
    "\1\26\2\0\1\4\1\33\2\0\1\34\3\0\1\34"+
    "\1\21\12\0\1\21\12\22\1\0\1\25\5\0\1\34"+
    "\3\0\1\35\3\0\1\35\1\22\1\35\3\22\12\0"+
    "\3\22\5\0\2\22\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u012c\0\u0352\0\u012c\0\u0384\0\u03b6\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u03e8\0\u041a"+
    "\0\u044c\0\u041a\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u012c\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u02ee\0\u0320\0\u0bea\0\u0384\0\u0c1c\0\u0c4e\0\u041a"+
    "\0\u0c80\0\u0cb2\0\u041a\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u06d6\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u012c\0\u12f2\0\u012c\0\u1324\0\u1356"+
    "\0\u0b86\0\u012c\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u0cb2\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0"+
    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770"+
    "\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u012c\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u012c\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u041a\0\u1ac2\0\u1af4\0\u1b26\0\u0672\0\u1b58"+
    "\0\u06d6\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\7\1\13\1\7\1\14"+
    "\1\15\1\16\24\15\1\17\2\15\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\15\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\7\2\10\1\37"+
    "\1\12\1\7\1\13\1\7\1\14\1\40\1\41\2\42"+
    "\1\43\1\44\1\45\1\42\1\46\1\42\1\47\1\50"+
    "\2\42\1\51\1\52\1\53\5\42\1\17\1\42\1\54"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\42"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\7\2\10\1\37\1\12\1\7\1\13\1\7\1\14"+
    "\1\55\1\41\6\55\1\56\15\55\1\17\2\55\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\55\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\7"+
    "\2\10\1\37\1\12\1\7\1\13\1\7\1\14\1\40"+
    "\1\41\1\57\1\42\1\60\1\61\1\62\1\57\1\63"+
    "\1\57\1\64\1\65\2\57\1\66\1\67\1\70\5\57"+
    "\1\17\1\57\1\71\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\57\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\7\2\10\1\37\1\12\1\7"+
    "\1\13\1\7\1\14\1\40\1\41\2\42\1\43\1\44"+
    "\1\45\1\42\1\46\1\42\1\47\1\50\2\42\1\51"+
    "\1\52\1\53\5\42\1\17\1\42\1\54\1\20\1\21"+
    "\1\72\1\23\1\24\1\25\1\26\1\42\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\7\2\73"+
    "\1\37\1\12\1\7\1\13\1\7\1\14\1\40\1\41"+
    "\2\42\1\43\1\44\1\45\1\42\1\46\1\42\1\47"+
    "\1\50\2\42\1\51\1\52\1\53\5\42\1\17\1\42"+
    "\1\54\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\42\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\63\0\2\10\62\0\1\11\20\0\1\74\24\0"+
    "\1\75\14\0\1\76\1\77\54\0\1\100\2\0\3\100"+
    "\1\101\1\102\52\100\1\103\2\0\4\103\1\104\1\105"+
    "\51\103\11\0\1\15\1\106\24\15\1\0\2\15\7\0"+
    "\1\15\21\0\1\107\1\110\24\107\1\0\2\107\7\0"+
    "\1\107\23\0\1\111\1\0\22\111\1\0\2\111\7\0"+
    "\1\111\21\0\1\112\1\0\24\112\1\0\2\112\7\0"+
    "\1\112\21\0\1\113\1\0\24\113\1\0\2\113\7\0"+
    "\1\113\21\0\1\114\2\0\23\114\1\0\2\114\7\0"+
    "\1\114\21\0\1\115\1\0\24\115\1\0\2\115\7\0"+
    "\1\115\16\0\1\116\1\0\1\117\54\0\1\37\67\0"+
    "\1\120\1\121\24\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\107\1\122\24\107\1\0\2\107\7\0\1\107\21\0"+
    "\1\120\1\121\3\120\1\123\1\124\17\120\1\0\2\120"+
    "\7\0\1\120\21\0\1\120\1\121\11\120\1\125\12\120"+
    "\1\0\2\120\7\0\1\120\21\0\1\120\1\121\5\120"+
    "\1\126\3\120\1\127\12\120\1\0\2\120\7\0\1\120"+
    "\21\0\1\120\1\121\2\120\1\130\4\120\1\131\14\120"+
    "\1\0\2\120\7\0\1\120\21\0\1\120\1\121\4\120"+
    "\1\132\17\120\1\0\2\120\7\0\1\120\21\0\1\120"+
    "\1\121\2\120\1\133\7\120\1\134\1\135\10\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\2\120\1\136"+
    "\21\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\11\120\1\137\12\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\7\120\1\140\7\120\1\141\4\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\54\1\121\2\54\22\120"+
    "\1\0\1\120\1\54\7\0\1\120\21\0\1\55\1\142"+
    "\24\55\1\0\2\55\7\0\1\55\21\0\1\55\1\142"+
    "\2\55\1\143\21\55\1\0\2\55\7\0\1\55\21\0"+
    "\1\120\1\121\24\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\3\57\1\144\1\145\17\57\1\0\2\57"+
    "\7\0\1\57\21\0\1\120\1\121\11\57\1\146\12\57"+
    "\1\0\2\57\7\0\1\57\21\0\1\120\1\121\5\57"+
    "\1\147\3\57\1\150\12\57\1\0\2\57\7\0\1\57"+
    "\21\0\1\120\1\121\2\57\1\151\4\57\1\152\14\57"+
    "\1\0\2\57\7\0\1\57\21\0\1\120\1\121\4\57"+
    "\1\153\17\57\1\0\2\57\7\0\1\57\21\0\1\120"+
    "\1\121\2\57\1\154\7\57\1\155\1\156\10\57\1\0"+
    "\2\57\7\0\1\57\21\0\1\120\1\121\2\57\1\157"+
    "\21\57\1\0\2\57\7\0\1\57\21\0\1\120\1\121"+
    "\11\57\1\160\12\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\7\57\1\161\7\57\1\162\4\57\1\0"+
    "\2\57\7\0\1\57\21\0\1\54\1\121\2\71\22\57"+
    "\1\0\1\57\1\71\7\0\1\57\10\0\62\73\26\0"+
    "\1\163\51\0\1\164\43\0\1\76\2\0\57\76\5\77"+
    "\1\165\54\77\1\100\2\0\3\100\1\166\1\102\52\100"+
    "\6\0\1\167\53\0\2\100\1\0\57\100\1\103\2\0"+
    "\4\103\1\104\1\166\53\103\1\0\57\103\10\0\1\170"+
    "\63\0\1\171\60\0\1\107\1\0\24\107\1\0\2\107"+
    "\2\0\1\172\4\0\1\107\21\0\1\171\1\0\24\171"+
    "\1\0\2\171\7\0\1\171\23\0\24\111\1\0\2\111"+
    "\7\0\1\111\21\0\1\114\2\0\23\114\1\0\2\114"+
    "\2\0\1\173\4\0\1\114\10\0\1\174\2\0\3\174"+
    "\1\175\1\176\52\174\1\177\2\0\4\177\1\200\1\201"+
    "\51\177\12\0\1\122\60\0\1\202\1\0\24\202\1\0"+
    "\2\202\7\0\1\202\21\0\1\120\1\121\4\120\1\203"+
    "\17\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\4\120\1\123\17\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\17\120\1\204\4\120\1\0\2\120\7\0"+
    "\1\120\21\0\1\120\1\121\3\120\1\125\20\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\12\120\1\205"+
    "\11\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\10\120\1\206\13\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\7\120\1\207\14\120\1\0\2\120\7\0"+
    "\1\120\21\0\1\120\1\121\6\120\1\210\15\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\3\120\1\211"+
    "\20\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\6\120\1\212\5\120\1\206\7\120\1\0\2\120\7\0"+
    "\1\120\21\0\1\120\1\121\20\120\1\213\3\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\15\120\1\123"+
    "\6\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\11\120\1\214\12\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\4\120\1\210\17\120\1\0\2\120\7\0"+
    "\1\120\22\0\1\202\60\0\1\55\1\142\12\55\1\215"+
    "\11\55\1\0\2\55\7\0\1\55\21\0\1\120\1\121"+
    "\4\57\1\216\17\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\4\57\1\144\17\57\1\0\2\57\7\0"+
    "\1\57\21\0\1\120\1\121\17\57\1\217\4\57\1\0"+
    "\2\57\7\0\1\57\21\0\1\120\1\121\3\57\1\146"+
    "\20\57\1\0\2\57\7\0\1\57\21\0\1\120\1\121"+
    "\12\57\1\220\11\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\10\57\1\221\13\57\1\0\2\57\7\0"+
    "\1\57\21\0\1\120\1\121\7\57\1\222\14\57\1\0"+
    "\2\57\7\0\1\57\21\0\1\120\1\121\6\57\1\223"+
    "\15\57\1\0\2\57\7\0\1\57\21\0\1\120\1\121"+
    "\3\57\1\224\20\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\6\57\1\225\5\57\1\221\7\57\1\0"+
    "\2\57\7\0\1\57\21\0\1\120\1\121\20\57\1\226"+
    "\3\57\1\0\2\57\7\0\1\57\21\0\1\120\1\121"+
    "\15\57\1\144\6\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\11\57\1\227\12\57\1\0\2\57\7\0"+
    "\1\57\21\0\1\120\1\121\4\57\1\223\17\57\1\0"+
    "\2\57\7\0\1\57\37\0\1\230\32\0\4\77\1\231"+
    "\1\165\54\77\1\167\2\0\3\167\1\232\1\233\52\167"+
    "\1\170\2\0\4\170\1\234\1\235\51\170\11\0\1\236"+
    "\2\0\23\236\1\0\2\236\7\0\1\236\10\0\1\174"+
    "\2\0\3\174\1\237\1\176\52\174\6\0\1\240\53\0"+
    "\2\174\1\0\57\174\1\177\2\0\4\177\1\200\1\237"+
    "\53\177\1\0\57\177\10\0\1\241\62\0\1\120\1\121"+
    "\5\120\1\123\16\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\22\120\1\242\1\120\1\0\2\120\7\0"+
    "\1\120\21\0\1\120\1\121\12\120\1\243\11\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\10\120\1\134"+
    "\13\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\11\120\1\244\12\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\7\120\1\123\14\120\1\0\2\120\7\0"+
    "\1\120\21\0\1\120\1\121\11\120\1\123\12\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\11\120\1\245"+
    "\12\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\12\120\1\246\11\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\23\120\1\123\1\0\2\120\7\0\1\120"+
    "\21\0\1\55\1\142\12\55\1\247\11\55\1\0\2\55"+
    "\7\0\1\55\21\0\1\120\1\121\5\57\1\144\16\57"+
    "\1\0\2\57\7\0\1\57\21\0\1\120\1\121\22\57"+
    "\1\250\1\57\1\0\2\57\7\0\1\57\21\0\1\120"+
    "\1\121\12\57\1\251\11\57\1\0\2\57\7\0\1\57"+
    "\21\0\1\120\1\121\10\57\1\155\13\57\1\0\2\57"+
    "\7\0\1\57\21\0\1\120\1\121\11\57\1\252\12\57"+
    "\1\0\2\57\7\0\1\57\21\0\1\120\1\121\7\57"+
    "\1\144\14\57\1\0\2\57\7\0\1\57\21\0\1\120"+
    "\1\121\11\57\1\144\12\57\1\0\2\57\7\0\1\57"+
    "\21\0\1\120\1\121\11\57\1\253\12\57\1\0\2\57"+
    "\7\0\1\57\21\0\1\120\1\121\12\57\1\254\11\57"+
    "\1\0\2\57\7\0\1\57\21\0\1\120\1\121\23\57"+
    "\1\144\1\0\2\57\7\0\1\57\33\0\1\255\44\0"+
    "\1\256\53\0\2\167\1\0\57\167\2\170\1\0\57\170"+
    "\10\0\1\257\62\0\1\236\2\0\23\236\1\0\2\236"+
    "\4\0\1\34\2\0\1\236\10\0\1\240\2\0\3\240"+
    "\1\260\1\261\52\240\1\241\2\0\4\241\1\262\1\263"+
    "\51\241\11\0\1\120\1\121\22\120\1\264\1\120\1\0"+
    "\2\120\7\0\1\120\21\0\1\120\1\121\5\120\1\265"+
    "\16\120\1\0\2\120\7\0\1\120\21\0\1\120\1\121"+
    "\14\120\1\125\7\120\1\0\2\120\7\0\1\120\21\0"+
    "\1\120\1\121\10\120\1\266\13\120\1\0\2\120\7\0"+
    "\1\120\21\0\1\120\1\121\22\57\1\267\1\57\1\0"+
    "\2\57\7\0\1\57\21\0\1\120\1\121\5\57\1\270"+
    "\16\57\1\0\2\57\7\0\1\57\21\0\1\120\1\121"+
    "\14\57\1\146\7\57\1\0\2\57\7\0\1\57\21\0"+
    "\1\120\1\121\10\57\1\271\13\57\1\0\2\57\7\0"+
    "\1\57\26\0\1\272\51\0\1\166\63\0\1\166\57\0"+
    "\1\273\53\0\2\240\1\0\57\240\2\241\1\0\57\241"+
    "\10\0\1\274\62\0\1\120\1\121\11\120\1\203\12\120"+
    "\1\0\2\120\7\0\1\120\21\0\1\120\1\121\16\120"+
    "\1\275\5\120\1\0\2\120\7\0\1\120\21\0\1\120"+
    "\1\121\2\120\1\276\21\120\1\0\2\120\7\0\1\120"+
    "\21\0\1\120\1\121\11\57\1\216\12\57\1\0\2\57"+
    "\7\0\1\57\21\0\1\120\1\121\16\57\1\277\5\57"+
    "\1\0\2\57\7\0\1\57\21\0\1\120\1\121\2\57"+
    "\1\300\21\57\1\0\2\57\7\0\1\57\34\0\1\301"+
    "\43\0\1\237\63\0\1\237\62\0\1\120\1\121\17\120"+
    "\1\134\4\120\1\0\2\120\7\0\1\120\21\0\1\120"+
    "\1\121\21\120\1\123\2\120\1\0\2\120\7\0\1\120"+
    "\21\0\1\120\1\121\17\57\1\155\4\57\1\0\2\57"+
    "\7\0\1\57\21\0\1\120\1\121\21\57\1\144\2\57"+
    "\1\0\2\57\7\0\1\57\13\0\1\302\61\0\1\302"+
    "\45\0\1\75\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\12\1\1\11\1\1\1\11\2\1\10\11"+
    "\33\1\1\11\1\1\2\0\2\1\1\0\1\1\3\0"+
    "\1\1\3\0\5\1\5\0\1\1\17\0\20\1\1\0"+
    "\1\11\1\1\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\3\0\2\1\12\0\13\1\1\0\1\11\5\0\1\11"+
    "\3\0\1\1\3\0\6\1\12\0\3\1\5\0\2\1"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _ConkittyLexer() {
    this((java.io.Reader)null);
  }

  public int multilineJavaScriptIndent;

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  protected abstract void readJavaScript() throws java.io.IOException;
  protected abstract void setMultilineJavaScriptIndent() throws java.io.IOException;
  protected abstract void readMultilineJavaScript() throws java.io.IOException;


  _ConkittyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _ConkittyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { yypushback(1); yybegin(NO_JS); return CSS_IF;
          }
        case 30: break;
        case 25: 
          { return COMMAND_NAME;
          }
        case 31: break;
        case 28: 
          { return INCLUDE;
          }
        case 32: break;
        case 18: 
          { return VARIABLE;
          }
        case 33: break;
        case 14: 
          { return COMMA;
          }
        case 34: break;
        case 3: 
          { yybegin(IN_TEMPLATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 35: break;
        case 13: 
          { return NODE_APPENDER;
          }
        case 36: break;
        case 21: 
          { return COMMENT;
          }
        case 37: break;
        case 20: 
          { readMultilineJavaScript(); return JAVASCRIPT;
          }
        case 38: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 39: break;
        case 5: 
          { readJavaScript(); return JAVASCRIPT;
          }
        case 40: break;
        case 24: 
          { return ATTR;
          }
        case 41: break;
        case 4: 
          { yybegin(IN_TEMPLATE); return TEMPLATE_NAME;
          }
        case 42: break;
        case 11: 
          { return ASSIGN;
          }
        case 43: break;
        case 9: 
          { return LCBRACKET;
          }
        case 44: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 45: break;
        case 8: 
          { return RSBRACKET;
          }
        case 46: break;
        case 7: 
          { return LSBRACKET;
          }
        case 47: break;
        case 19: 
          { yybegin(IN_TEMPLATE); return LBRACKET;
          }
        case 48: break;
        case 23: 
          { return CSS_ID;
          }
        case 49: break;
        case 22: 
          { return STRING;
          }
        case 50: break;
        case 29: 
          { yybegin(AFTER_CALL); return COMMAND_NAME;
          }
        case 51: break;
        case 26: 
          { yybegin(MULTILINE_JS); setMultilineJavaScriptIndent(); return COMMAND_NAME;
          }
        case 52: break;
        case 12: 
          { return CSS_CLASS;
          }
        case 53: break;
        case 16: 
          { return CSS_TAG;
          }
        case 54: break;
        case 10: 
          { return RCBRACKET;
          }
        case 55: break;
        case 6: 
          { return RBRACKET;
          }
        case 56: break;
        case 17: 
          { yybegin(IN_CALL); return TEMPLATE_NAME;
          }
        case 57: break;
        case 15: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 58: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
