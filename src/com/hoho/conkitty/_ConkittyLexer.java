/* The following code was generated by JFlex 1.4.3 on 11/19/13 8:58 PM */

package com.hoho.conkitty;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.conkitty.psi.ConkittyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/19/13 8:58 PM from the specification file
 * <tt>/Users/hoho/Work/conkittyPlugin/src/com/hoho/conkitty/Conkitty.flex</tt>
 */
abstract class _ConkittyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_UJAVASCRIPT = 6;
  public static final int IN_TEMPLATE = 10;
  public static final int IN_CALL = 14;
  public static final int IN_VAR_DECL = 12;
  public static final int IN_JAVASCRIPT = 2;
  public static final int IN_JAVASCRIPT2 = 4;
  public static final int AFTER_SOMETHING = 18;
  public static final int IN_BAD = 16;
  public static final int YYINITIAL = 0;
  public static final int IN_UJAVASCRIPT2 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  2,  2,  4,  4,  5,  5,  6,  6, 
     7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\10"+
    "\1\35\1\0\1\41\1\0\1\12\1\42\1\43\1\34\2\0\1\5"+
    "\1\35\1\33\12\7\3\0\1\37\2\0\1\47\1\13\1\4\1\16"+
    "\1\31\1\23\2\4\1\20\1\25\2\4\1\17\1\32\1\26\1\21"+
    "\1\27\1\4\1\15\1\22\1\14\2\4\1\24\1\4\1\30\1\4"+
    "\1\36\1\11\1\40\1\0\1\6\1\0\32\46\1\44\1\0\1\45"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\1\20\5\20\6"+
    "\20\7\1\10\13\1\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\3\17\1\20\1\0\1\21\22\0\1\5"+
    "\22\0\1\6\22\0\1\7\2\0\1\22\3\0\1\22"+
    "\23\0\1\13\1\0\1\17\40\0\1\22\7\0\1\23"+
    "\4\0\1\24\1\25\1\12\1\13\1\0\1\13\2\0"+
    "\1\16\1\17\1\0\1\21\3\0\1\5\3\0\1\6"+
    "\3\0\1\7\4\0\1\26\4\0\1\13\3\0\1\17"+
    "\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0168\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0168\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u0168\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820"+
    "\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960"+
    "\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0"+
    "\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0"+
    "\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0208\0\u0cd0\0\u0cf8"+
    "\0\u0438\0\u0280\0\u0d20\0\u02a8\0\u0d48\0\u0d70\0\u0d98\0\u0dc0"+
    "\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00"+
    "\0\u0f28\0\u0f50\0\u0f78\0\u0690\0\u04d8\0\u0fa0\0\u0500\0\u0fc8"+
    "\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108"+
    "\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u08e8\0\u0730"+
    "\0\u1220\0\u0758\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310"+
    "\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450"+
    "\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590"+
    "\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0"+
    "\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810"+
    "\0\u1838\0\u1860\0\u0b90\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68"+
    "\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8"+
    "\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8"+
    "\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u0168\0\u1dd8\0\u1e00"+
    "\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u0168\0\u1ef0\0\u1f18"+
    "\0\u1f40\0\u1f68\0\u0168\0\u0168\0\u0168\0\u1f90\0\u1fb8\0\u1fe0"+
    "\0\u2008\0\u2030\0\u0168\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8"+
    "\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238"+
    "\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u0168\0\u2350"+
    "\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468\0\u2490"+
    "\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580\0\u25a8\0\u25d0"+
    "\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698\0\u26c0\0\u26e8\0\u2710"+
    "\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\u2850"+
    "\0\u2878\0\u28a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\6\12\20\15\1\16\12\12"+
    "\1\15\1\12\1\17\2\20\1\21\4\17\1\22\1\17"+
    "\1\23\1\24\1\25\1\17\1\26\2\17\1\27\1\30"+
    "\1\31\1\32\2\17\1\33\2\17\1\34\1\35\13\17"+
    "\1\36\1\37\2\40\1\41\4\37\1\42\1\37\1\43"+
    "\1\44\1\45\1\37\1\46\2\37\1\47\1\50\1\51"+
    "\1\52\2\37\1\53\2\37\1\54\1\55\13\37\1\56"+
    "\1\57\2\60\1\61\4\57\1\62\1\57\1\63\1\64"+
    "\1\65\1\57\1\66\2\57\1\67\1\70\1\71\1\72"+
    "\2\57\1\73\2\57\1\74\1\75\13\57\1\76\1\12"+
    "\2\13\1\77\4\12\1\100\1\12\1\101\1\102\1\103"+
    "\1\12\1\104\2\12\1\105\1\106\1\107\1\110\2\12"+
    "\1\111\2\12\1\112\1\16\6\12\1\113\1\114\2\12"+
    "\1\115\1\116\1\12\2\13\1\77\1\117\1\12\1\117"+
    "\1\12\1\100\1\12\1\101\20\117\1\16\6\12\1\113"+
    "\1\114\2\12\1\117\2\12\2\13\1\77\1\120\6\12"+
    "\20\120\1\16\6\12\1\113\1\121\2\12\1\120\1\12"+
    "\1\122\2\13\1\123\27\122\1\124\14\122\1\12\2\13"+
    "\1\125\27\12\1\16\14\12\51\0\2\13\50\0\1\14"+
    "\27\0\1\126\20\0\4\15\3\0\20\15\13\0\1\15"+
    "\34\0\1\127\1\130\14\0\2\20\50\0\1\21\27\0"+
    "\1\131\14\0\1\132\2\0\5\132\1\17\1\133\36\132"+
    "\1\134\2\0\6\134\1\135\1\17\35\134\14\0\1\136"+
    "\56\0\1\137\37\0\1\140\4\0\1\141\43\0\1\142"+
    "\56\0\1\143\37\0\1\144\3\0\1\145\50\0\1\146"+
    "\4\0\1\147\35\0\1\150\57\0\1\151\57\0\1\152"+
    "\1\153\17\0\3\36\4\0\20\36\13\0\1\36\2\0"+
    "\2\40\50\0\1\41\27\0\1\154\14\0\1\155\2\0"+
    "\5\155\1\37\1\156\36\155\1\157\2\0\6\157\1\160"+
    "\1\37\35\157\14\0\1\161\56\0\1\162\37\0\1\163"+
    "\4\0\1\164\43\0\1\165\56\0\1\166\37\0\1\167"+
    "\3\0\1\170\50\0\1\171\4\0\1\172\35\0\1\173"+
    "\57\0\1\174\57\0\1\175\1\176\17\0\3\56\4\0"+
    "\20\56\13\0\1\56\2\0\2\60\50\0\1\61\27\0"+
    "\1\177\14\0\1\200\2\0\5\200\1\57\1\201\36\200"+
    "\1\202\2\0\6\202\1\203\1\57\35\202\14\0\1\204"+
    "\56\0\1\205\37\0\1\206\4\0\1\207\43\0\1\210"+
    "\56\0\1\211\37\0\1\212\3\0\1\213\50\0\1\214"+
    "\4\0\1\215\35\0\1\216\57\0\1\217\57\0\1\220"+
    "\1\221\17\0\3\76\4\0\20\76\13\0\1\76\4\0"+
    "\1\77\27\0\1\126\14\0\1\222\2\0\5\222\1\223"+
    "\1\224\36\222\1\225\2\0\6\225\1\226\1\227\35\225"+
    "\14\0\1\230\56\0\1\231\37\0\1\232\4\0\1\233"+
    "\43\0\1\234\56\0\1\235\37\0\1\236\3\0\1\237"+
    "\50\0\1\240\4\0\1\241\35\0\1\242\57\0\1\243"+
    "\66\0\1\244\50\0\1\245\11\0\3\115\25\0\1\246"+
    "\1\247\2\0\1\250\1\251\1\0\1\252\1\0\1\115"+
    "\5\0\3\253\4\0\20\253\13\0\1\253\5\0\1\117"+
    "\1\0\2\117\3\0\20\117\13\0\1\117\5\0\4\120"+
    "\3\0\20\120\13\0\1\120\44\0\1\254\4\0\1\122"+
    "\2\0\46\122\2\0\1\123\27\122\1\124\15\122\2\0"+
    "\31\122\1\255\13\122\3\0\1\125\27\0\1\126\14\0"+
    "\1\127\2\0\45\127\34\256\1\257\13\256\2\132\1\0"+
    "\45\132\2\134\1\0\45\134\14\0\1\260\55\0\1\143"+
    "\44\0\1\261\51\0\1\262\46\0\1\263\43\0\1\17"+
    "\51\0\1\264\53\0\1\265\50\0\1\266\40\0\1\264"+
    "\63\0\1\267\51\0\1\17\15\0\1\152\2\0\45\152"+
    "\34\270\1\271\13\270\2\155\1\0\45\155\2\157\1\0"+
    "\45\157\14\0\1\272\55\0\1\166\44\0\1\273\51\0"+
    "\1\274\46\0\1\275\43\0\1\37\51\0\1\276\53\0"+
    "\1\277\50\0\1\300\40\0\1\276\63\0\1\301\51\0"+
    "\1\37\15\0\1\175\2\0\45\175\34\302\1\303\13\302"+
    "\2\200\1\0\45\200\2\202\1\0\45\202\14\0\1\304"+
    "\55\0\1\211\44\0\1\305\51\0\1\306\46\0\1\307"+
    "\43\0\1\57\51\0\1\310\53\0\1\311\50\0\1\312"+
    "\40\0\1\310\63\0\1\313\51\0\1\57\15\0\1\220"+
    "\2\0\45\220\34\314\1\315\13\314\1\222\2\0\5\222"+
    "\1\316\1\224\36\222\10\0\1\317\37\0\2\222\1\0"+
    "\45\222\1\225\2\0\6\225\1\226\1\316\37\225\1\0"+
    "\45\225\12\0\1\320\51\0\1\321\55\0\1\322\44\0"+
    "\1\323\51\0\1\324\46\0\1\325\43\0\1\326\51\0"+
    "\1\327\53\0\1\330\50\0\1\331\40\0\1\327\63\0"+
    "\1\332\51\0\1\333\57\0\1\334\50\0\1\335\10\0"+
    "\4\336\3\0\20\336\13\0\1\336\4\0\1\247\4\337"+
    "\3\0\20\337\13\0\1\337\5\0\2\340\1\0\1\340"+
    "\3\0\20\340\13\0\1\340\4\0\1\251\2\341\1\0"+
    "\1\341\3\0\20\341\13\0\1\341\4\0\1\252\2\342"+
    "\1\0\1\342\3\0\20\342\13\0\1\342\44\0\1\343"+
    "\4\0\1\344\2\256\31\344\1\122\13\344\34\256\1\345"+
    "\13\256\33\0\1\346\1\257\30\0\1\17\51\0\1\17"+
    "\51\0\1\145\51\0\1\347\44\0\1\17\52\0\1\17"+
    "\52\0\1\17\40\0\1\350\30\0\34\270\1\351\13\270"+
    "\33\0\1\352\1\271\30\0\1\37\51\0\1\37\51\0"+
    "\1\170\51\0\1\353\44\0\1\37\52\0\1\37\52\0"+
    "\1\37\40\0\1\354\30\0\34\302\1\355\13\302\33\0"+
    "\1\356\1\303\30\0\1\57\51\0\1\57\51\0\1\213"+
    "\51\0\1\357\44\0\1\57\52\0\1\57\52\0\1\57"+
    "\40\0\1\360\30\0\34\314\1\361\13\314\33\0\1\362"+
    "\1\315\13\0\1\317\2\0\5\317\1\363\1\364\36\317"+
    "\1\320\2\0\6\320\1\365\1\366\35\320\15\0\1\333"+
    "\46\0\1\333\52\0\1\367\51\0\1\237\51\0\1\370"+
    "\44\0\1\326\52\0\1\333\52\0\1\333\40\0\1\371"+
    "\34\0\4\336\3\0\20\336\2\0\1\246\1\247\2\0"+
    "\1\250\1\251\1\0\1\252\1\0\1\336\4\0\1\372"+
    "\4\337\3\0\20\337\4\0\1\373\1\374\5\0\1\337"+
    "\5\0\2\340\1\0\1\340\3\0\20\340\2\0\1\246"+
    "\1\247\2\0\1\250\1\251\1\0\1\252\1\0\1\340"+
    "\4\0\1\375\2\341\1\0\1\341\3\0\20\341\10\0"+
    "\1\374\2\0\1\341\4\0\1\376\2\342\1\0\1\342"+
    "\3\0\20\342\4\0\1\377\5\0\1\374\1\342\1\0"+
    "\1\344\2\256\31\344\1\u0100\13\344\33\256\1\346\1\345"+
    "\13\256\3\0\1\346\61\0\1\u0101\53\0\1\u0102\26\0"+
    "\33\270\1\352\1\351\13\270\3\0\1\352\61\0\1\u0103"+
    "\53\0\1\u0104\26\0\33\302\1\356\1\355\13\302\3\0"+
    "\1\356\61\0\1\u0105\53\0\1\u0106\26\0\33\314\1\362"+
    "\1\361\13\314\3\0\1\362\54\0\1\u0107\37\0\2\317"+
    "\1\0\45\317\2\320\1\0\45\320\12\0\1\u0108\52\0"+
    "\1\u0109\53\0\1\u010a\31\0\1\372\33\0\1\373\1\374"+
    "\12\0\1\373\4\u010b\1\u010c\1\0\1\u010d\20\u010b\13\0"+
    "\1\u010b\36\0\1\246\1\247\2\0\1\250\1\251\1\0"+
    "\1\252\6\0\1\375\37\0\1\374\7\0\1\376\33\0"+
    "\1\377\5\0\1\374\5\0\1\377\2\u010e\1\0\1\u010e"+
    "\3\0\20\u010e\13\0\1\u010e\1\0\1\344\2\256\30\344"+
    "\1\122\1\u0100\13\344\24\0\1\u010f\36\0\1\u0110\60\0"+
    "\1\u0111\36\0\1\u0112\60\0\1\u0113\36\0\1\u0114\44\0"+
    "\1\316\51\0\1\316\61\0\1\u0115\36\0\1\u0116\37\0"+
    "\1\u0117\4\u010b\3\0\20\u010b\5\0\1\374\5\0\1\u010b"+
    "\1\0\1\u010c\2\0\5\u010c\1\u0117\1\u0118\36\u010c\1\u010d"+
    "\2\0\6\u010d\1\u0119\1\u0117\35\u010d\3\0\1\u011a\2\u010e"+
    "\1\0\1\u010e\3\0\20\u010e\12\0\1\374\1\u010e\26\0"+
    "\1\145\53\0\1\17\43\0\1\170\53\0\1\37\43\0"+
    "\1\213\53\0\1\57\43\0\1\237\53\0\1\333\21\0"+
    "\1\u0117\34\0\1\374\7\0\2\u010c\1\0\45\u010c\2\u010d"+
    "\1\0\45\u010d\3\0\1\u011a\41\0\1\374\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\17\1\1\11\17\1\1\11"+
    "\46\1\1\0\1\1\22\0\1\1\22\0\1\1\22\0"+
    "\1\1\2\0\1\1\3\0\1\1\23\0\1\1\1\0"+
    "\1\1\40\0\1\11\7\0\1\11\4\0\3\11\1\1"+
    "\1\0\1\1\2\0\1\11\1\1\1\0\1\1\3\0"+
    "\1\1\3\0\1\1\3\0\1\1\4\0\1\11\4\0"+
    "\1\1\3\0\1\1\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _ConkittyLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  private int afterJavaScript = YYINITIAL;
  private int afterSomething = IN_TEMPLATE;

  protected abstract void readJavaScript(int state) throws java.io.IOException;


  _ConkittyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _ConkittyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return VARIABLE;
          }
        case 23: break;
        case 17: 
          { return COMMENT;
          }
        case 24: break;
        case 11: 
          { afterSomething = yystate(); yybegin(AFTER_SOMETHING); return CSS;
          }
        case 25: break;
        case 4: 
          { yybegin(IN_VAR_DECL); return TEMPLATE_NAME;
          }
        case 26: break;
        case 20: 
          { afterSomething = yystate(); yybegin(AFTER_SOMETHING); return KEYWORD;
          }
        case 27: break;
        case 5: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(afterJavaScript); return JAVASCRIPT;
          }
        case 28: break;
        case 15: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 29: break;
        case 6: 
          { return JAVASCRIPT;
          }
        case 30: break;
        case 16: 
          { yybegin(afterSomething); return WHITE_SPACE;
          }
        case 31: break;
        case 13: 
          { yybegin(IN_TEMPLATE); return TEMPLATE_NAME;
          }
        case 32: break;
        case 21: 
          { afterJavaScript = yystate(); yybegin(IN_UJAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 33: break;
        case 7: 
          { yybegin(IN_UJAVASCRIPT2); readJavaScript(afterJavaScript); return JAVASCRIPT;
          }
        case 34: break;
        case 18: 
          { afterSomething = yystate(); yybegin(AFTER_SOMETHING); return STRING;
          }
        case 35: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 36: break;
        case 9: 
          { afterJavaScript = yystate(); yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 37: break;
        case 8: 
          { return WHITE_SPACE;
          }
        case 38: break;
        case 3: 
          { yybegin(IN_TEMPLATE); return WHITE_SPACE;
          }
        case 39: break;
        case 14: 
          { yybegin(IN_TEMPLATE); return JAVASCRIPT_END;
          }
        case 40: break;
        case 22: 
          { afterSomething = IN_CALL; yybegin(AFTER_SOMETHING); return KEYWORD;
          }
        case 41: break;
        case 1: 
          { yybegin(IN_BAD); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 42: break;
        case 19: 
          { afterSomething = IN_VAR_DECL; yybegin(AFTER_SOMETHING); return KEYWORD;
          }
        case 43: break;
        case 10: 
          { return JAVASCRIPT_END;
          }
        case 44: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
